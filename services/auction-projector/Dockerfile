# ------------------------------------------------------------
# Builder stage
# ------------------------------------------------------------
FROM golang:1.24-alpine AS builder
LABEL maintainer="kei"

# use separate working dir
WORKDIR /src

# install git for fetching private deps
RUN apk add --no-cache git

# copy mod files (docker cache)
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest
COPY . .

# build for linux/amd64
# - CGO_ENABLED=0 for static linking
# - -ldflags="-s -w" strips symbol/debug info to reduce size
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -trimpath -ldflags="-s -w" \
    -o /bin/auction-projector ./services/auction-projector/cmd/main.go

# ------------------------------------------------------------
# Runtime stage
# ------------------------------------------------------------
FROM alpine:3.20

# Install ca-certificates, tzdata, curl
# ca cert for outbound HTTPS
# tzdata for time zone math
# curl for container health checks
# non-root user for later to run the app
RUN apk add --no-cache ca-certificates tzdata curl \
    && adduser -D -u 10001 appuser

# set working dir
WORKDIR /app

# copy compiled binary from builder stage
COPY --from=builder /bin/auction-projector /app/auction-projector

# copy config file with hardcoded Service Discovery DNS names
COPY --from=builder /src/services/auction-projector/cmd/config.json /app/config.json

# Change ownership to appuser (as root before switching user)
RUN chown -R appuser:appuser /app

# use non root user to run
USER appuser

# run on port 8084
EXPOSE 8084

# run the binary directly
CMD ["/app/auction-projector"]